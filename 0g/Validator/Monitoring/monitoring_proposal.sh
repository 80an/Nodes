#!/bin/bash

# === –¶–≤–µ—Ç–∞ –¥–ª—è –æ—à–∏–±–æ–∫ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ) ===
B_RED="\e[31m"
NO_COLOR="\e[0m"

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ ~/.validator_config/env ===
ENV_FILE="$HOME/.validator_config/env"
PROPOSAL_CACHE="$HOME/.0g_known_proposals"
REMINDER_LOG="$HOME/.0g_proposal_reminders"
if [ -f "$ENV_FILE" ]; then
  set -o allexport
  source "$ENV_FILE"
  set +o allexport
else
  echo -e "${B_RED}‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏: $ENV_FILE${NO_COLOR}"
  exit 1
fi

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ===
if [ -z "$TELEGRAM_BOT_TOKEN" ] || [ -z "$TELEGRAM_CHAT_ID" ]; then
  echo -e "${B_RED}‚ùå –ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω—ã –≤ $ENV_FILE${NO_COLOR}"
  exit 1
fi

# === –£—Ç–∏–ª–∏—Ç—ã ===

send_telegram_alert() {
  local message="$1"
  curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
    -d chat_id="$TELEGRAM_CHAT_ID" \
    -d parse_mode="HTML" \
    -d text="$message" > /dev/null
}

to_msk() {
  local iso_time="$1"
  date -d "$iso_time +3 hours" +"%d-%m-%Y %H:%M (–ú–°–ö)"
}

extract_title() {
  echo "$1" | jq -r '.title // .content.title // .content["@type"] // "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"'
}

extract_description() {
  local desc=$(echo "$1" | jq -r '.description // .summary // .content.description // empty')
  if [[ -z "$desc" || "$desc" == "null" ]]; then
    desc=$(echo "$1" | jq -r '.content.changes[]? | "\(.subspace): \(.key) => \(.value)"' 2>/dev/null | head -c 400)
    [[ -z "$desc" ]] && desc="–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
  fi
  echo "$desc" | head -c 400
}

mkdir -p "$(dirname "$PROPOSAL_CACHE")"
touch "$PROPOSAL_CACHE" "$REMINDER_LOG"

# === –°—Ç–∞—Ä—Ç–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ===

proposals_json=$(0gchaind q gov proposals --output json)
current_proposals=$(echo "$proposals_json" | jq -c '.proposals[]')
found_current=false
latest_id=""
latest_end=""

echo "$current_proposals" | while IFS= read -r prop; do
  id=$(echo "$prop" | jq -r '.id')
  status=$(echo "$prop" | jq -r '.status')

  if [ "$status" == "PROPOSAL_STATUS_VOTING_PERIOD" ]; then
    found_current=true
    voting_end=$(echo "$prop" | jq -r '.voting_end_time')
    title=$(extract_title "$prop")
    description=$(extract_description "$prop")
    msk_time=$(to_msk "$voting_end")

    msg=$(cat <<EOF
<b>üì¢ –¢–µ–∫—É—â–µ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ ‚Ññ$id</b>

<b>üìù –ù–∞–∑–≤–∞–Ω–∏–µ:</b> $title
<b>üìÑ –û–ø–∏—Å–∞–Ω–∏–µ:</b> $description

<b>üìÖ –î–æ:</b> <code>$msk_time</code>
<b>üìå –°—Ç–∞—Ç—É—Å:</b> $status

üó≥ –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!
EOF
)
    send_telegram_alert "$msg"
  fi

  if [[ -z "$latest_id" || "$id" -gt "$latest_id" ]]; then
    latest_id="$id"
    latest_end=$(echo "$prop" | jq -r '.voting_end_time')
  fi
done

if [ "$found_current" = false ]; then
  msk_end=$(to_msk "$latest_end")
  msg=$(cat <<EOF
<b>üìä –¢–µ–∫—É—â–∏—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –Ω–µ—Ç.</b>

–ü–æ—Å–ª–µ–¥–Ω–µ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ: ‚Ññ<b>$latest_id</b>
<b>üìÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ:</b> <code>$msk_end</code>

üìâ –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ, –Ω–æ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏!
EOF
)
  send_telegram_alert "$msg"
fi

# === –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ===
while true; do
  proposals=$(0gchaind q gov proposals --output json | jq -c '.proposals[]')

  echo "$proposals" | while IFS= read -r prop; do
    id=$(echo "$prop" | jq -r '.id')
    status=$(echo "$prop" | jq -r '.status')
    voting_end=$(echo "$prop" | jq -r '.voting_end_time')
    deadline_ts=$(date -d "$voting_end" +%s)
    now_ts=$(date +%s)
    title=$(extract_title "$prop")
    description=$(extract_description "$prop")
    msk_time=$(to_msk "$voting_end")

    # –ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    if ! grep -q "^$id$" "$PROPOSAL_CACHE"; then
      echo "$id" >> "$PROPOSAL_CACHE"
      msg=$(cat <<EOF
<b>üì¢ –ù–æ–≤—ã–π –ø—Ä–æ–ø–æ–∑–∞–ª ‚Ññ$id</b>

<b>üìù –ù–∞–∑–≤–∞–Ω–∏–µ:</b> $title
<b>üìÑ –û–ø–∏—Å–∞–Ω–∏–µ:</b> $description

<b>üìÖ –î–æ:</b> <code>$msk_time</code>
<b>üìå –°—Ç–∞—Ç—É—Å:</b> $status

üó≥ –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!
EOF
)
      send_telegram_alert "$msg"
    fi

    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    for interval in 86400 10800 3600; do
      label="$id-$interval"
      if [ $((deadline_ts - now_ts)) -le $interval ] && ! grep -q "$label" "$REMINDER_LOG"; then
        case $interval in
          86400) msg_time="‚è∞ –û—Å—Ç–∞–ª—Å—è 1 –¥–µ–Ω—å –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è";;
          10800) msg_time="‚è∞ –û—Å—Ç–∞–ª–æ—Å—å 3 —á–∞—Å–∞ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è";;
          3600)  msg_time="‚è∞ –û—Å—Ç–∞–ª—Å—è 1 —á–∞—Å –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è";;
        esac

        msg=$(cat <<EOF
<b>üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏ ‚Ññ$id</b>

<b>üìù –ù–∞–∑–≤–∞–Ω–∏–µ:</b> $title
<b>üìÑ –û–ø–∏—Å–∞–Ω–∏–µ:</b> $description

<b>üìÖ –î–æ:</b> <code>$msk_time</code>
<b>üìå –°—Ç–∞—Ç—É—Å:</b> $status

$msg_time
EOF
)
        send_telegram_alert "$msg"
        echo "$label" >> "$REMINDER_LOG"
      fi
    done
  done

  sleep 300
done
