#!/bin/bash

PROJECT_NAME="0G"
PROJECT_DIR=".0gchain"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
B_GREEN="\e[32m"
B_YELLOW="\e[33m"
B_RED="\e[31m"
NO_COLOR="\e[0m"

# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å –æ—Ç keyring
echo
read -s -p "Enter keyring password: " KEYRING_PASSWORD
echo

# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º, —á—Ç–æ –º—ã —Ö–æ—Ç–∏–º –≤–≤–µ—Å—Ç–∏: –∏–º—è –∏–ª–∏ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
echo "–í—ã–±–µ—Ä–µ—Ç–µ, —á—Ç–æ –≤–≤–æ–¥–∏—Ç—å:"
echo "1) –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞"
echo "2) –í–≤–µ—Å—Ç–∏ –∏–º—è –∫–æ—à–µ–ª—å–∫–∞"
read -p "–ß—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ? (1 –∏–ª–∏ 2): " CHOICE

if [ "$CHOICE" -eq 1 ]; then
  # –í–≤–æ–¥–∏–º –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
  read -p "–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: " WALLET_ADDRESS
  WALLET_NAME=$(printf "%s" "$KEYRING_PASSWORD" | 0gchaind keys show "$WALLET_ADDRESS" --output json | jq -r '.name') # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–æ—à–µ–ª—å–∫–∞
elif [ "$CHOICE" -eq 2 ]; then
  # –í–≤–æ–¥–∏–º –∏–º—è –∫–æ—à–µ–ª—å–∫–∞
  read -p "–í–≤–µ—Å—Ç–∏ –∏–º—è –∫–æ—à–µ–ª—å–∫–∞: " WALLET_NAME
  WALLET_ADDRESS=$(printf "%s" "$KEYRING_PASSWORD" | 0gchaind keys show "$WALLET_NAME" --bech acc -a)
else
  echo -e "${B_RED}Invalid choice. Please select 1 or 2.${NO_COLOR}"
  exit 1
fi

# –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
VALIDATOR_ADDRESS=$(printf "%s" "$KEYRING_PASSWORD" | 0gchaind keys show "$WALLET_NAME" --bech val -a)

# –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—à–µ–ª—å–∫–µ –∏ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–µ
echo -e "${B_GREEN}Wallet Name: ${NO_COLOR}$WALLET_NAME"
echo -e "${B_YELLOW}Wallet Address: ${NO_COLOR}$WALLET_ADDRESS"
echo -e "${B_RED}Validator Address: ${NO_COLOR}$VALIDATOR_ADDRESS"

# –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å Telegram-–±–æ—Ç–∞ –∏ Chat ID
read -p "Enter your Telegram Bot Token: " TELEGRAM_BOT_TOKEN
read -p "Enter your Telegram Chat ID: " TELEGRAM_CHAT_ID

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
send_telegram_alert() {
  local message="$1"
  curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
       -d chat_id="$TELEGRAM_CHAT_ID" \
       -d text="$message"
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã—Å–æ—Ç—ã –±–ª–æ–∫–æ–≤ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –Ω–æ–¥—ã –ø—Ä–∏ –æ—Ç—Å—Ç–∞–≤–∞–Ω–∏–∏
check_blocks() {
  RPC_PORT=$(grep -m 1 -oP '^laddr = "\K[^"]+' "$HOME/$PROJECT_DIR/config/config.toml" | cut -d ':' -f 3)

  # –°–ø–∏—Å–æ–∫ RPC
  RPC_URLS=("https://rpc.0g.noders.services" "https://0g-rpc.stavr.tech")
  CURRENT_RPC=""

  # –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã—Å–æ—Ç—ã –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ RPC
  get_rpc_height() {
    for url in "${RPC_URLS[@]}"; do
      height=$(curl -s "$url/status" | jq -r '.result.sync_info.latest_block_height')
      if [[ "$height" =~ ^[0-9]+$ ]]; then
        if [ "$url" != "$CURRENT_RPC" ]; then
          CURRENT_RPC="$url"
          echo -e "${B_YELLOW}üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤—ã–π RPC: $CURRENT_RPC${NO_COLOR}"
          send_telegram_alert "‚ÑπÔ∏è –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–π RPC: $CURRENT_RPC"
        fi
        echo "$height"
        return
      else
        echo -e "${B_YELLOW}‚ö†Ô∏è RPC –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª: $url${NO_COLOR}"
      fi
    done
    echo "0"
  }

  while true; do
    NODE_HEIGHT=$(curl -s localhost:$RPC_PORT/status | jq -r '.result.sync_info.latest_block_height')
    RPC_HEIGHT=$(get_rpc_height)

    if ! [[ "$NODE_HEIGHT" =~ ^[0-9]+$ ]] || [ "$RPC_HEIGHT" -eq 0 ]; then
      echo -e "${B_RED}‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã—Å–æ—Ç. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...${NO_COLOR}"
      sleep 5
      continue
    fi

    BLOCKS_LEFT=$((RPC_HEIGHT - NODE_HEIGHT))
    [ "$BLOCKS_LEFT" -lt 0 ] && BLOCKS_LEFT=0

    echo -e "Node Height: ${B_GREEN}$NODE_HEIGHT${NO_COLOR} | RPC Height: ${B_YELLOW}$RPC_HEIGHT${NO_COLOR} | Blocks Left: ${B_RED}$BLOCKS_LEFT${NO_COLOR}"

    if [ "$BLOCKS_LEFT" -gt 5 ]; then
      echo -e "${B_RED}‚ö†Ô∏è –†–∞–∑–Ω–∏—Ü–∞ –±–æ–ª—å—à–µ 5 –±–ª–æ–∫–æ–≤. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...${NO_COLOR}"
      send_telegram_alert "‚ö†Ô∏è Node is behind by $BLOCKS_LEFT blocks (using RPC: $CURRENT_RPC). Restarting..."
      sudo systemctl restart ogd
      sleep 30
    fi

    sleep 5
  done
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ unjail
check_validator() {
  while true; do
    jailed_status=$(printf "%s" "$KEYRING_PASSWORD" | 0gchaind q staking validator "$VALIDATOR_ADDRESS" --output json | jq -r '.jailed')
    echo "Validator jailed status: $jailed_status"
    if [ "$jailed_status" = "true" ]; then
      echo -e "${B_RED}Validator is jailed! Executing unjail command...${NO_COLOR}"
      send_telegram_alert "üö® Validator is jailed! Attempting unjail..."
      printf "%s" "$KEYRING_PASSWORD" | 0gchaind tx slashing unjail \
        --from "$WALLET_NAME" \
        --chain-id zgtendermint_16600-2 \
        --gas-adjustment 1.7 \
        --gas auto \
        --gas-prices 0.003ua0gi \
        -y
    fi
    sleep 300
  done
}

check_blocks &
check_validator &
wait
